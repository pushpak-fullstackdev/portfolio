{"version":3,"sources":["components/Sidepanel.js","components/Body.js","components/Main.js","components/router-components/Home.js","components/router-components/About.js","components/router-components/Skills.js","components/router-components/Experience.js","components/router-components/Projects.js","App.js","serviceWorker.js","index.js"],"names":["SidePanel","history","useHistory","onClick","push","Body","child","Main","className","Home","src","window","open","aria-hidden","About","Skills","Experience","Projects","App","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAsCeA,EAnCG,WACd,IAAMC,EAAUC,cAChB,OAEQ,6BACI,yBAAKC,QAAS,WACVF,EAAQG,KAAK,OADjB,QAKA,yBAAKD,QAAS,WACVF,EAAQG,KAAK,YADjB,SAKA,yBAAKD,QAAS,WACVF,EAAQG,KAAK,aADjB,UAKA,yBAAKD,QAAS,WACVF,EAAQG,KAAK,iBADjB,cAKA,yBAAKD,QAAS,WACVF,EAAQG,KAAK,eADjB,cCjBDC,EAVF,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACX,OAEQ,6BACKA,ICUFC,EAXF,SAAC,GAAe,IAAbD,EAAY,EAAZA,MACZ,OAEQ,yBAAKE,UAAU,QACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMF,MAAOA,M,OC6BdG,EApCF,WACT,OAEQ,6BACI,yBAAKC,IAAI,kBACT,6BACA,uBAAGF,UAAU,SAAb,wBACA,uBAAGA,UAAU,aAAb,wBAEA,yBAAKA,UAAU,kCACX,uBAAGA,UAAU,0BACbL,QAAS,WACLQ,OAAOC,KAAK,4CAEhBC,cAAY,SACZ,uBAAGL,UAAU,4BACbL,QAAS,WACLQ,OAAOC,KAAK,oDAEhBC,cAAY,SACZ,uBAAGL,UAAU,6BACbL,QAAS,WACLQ,OAAOC,KAAK,4CAEhBC,cAAY,SACZ,uBAAGL,UAAU,4BACbL,QAAS,WACLQ,OAAOC,KAAK,yCAEhBC,cAAY,YCnBjBC,EAVD,WACV,OAEQ,uCCOGC,EAVA,WACX,OAEQ,wCCOGC,EAVI,WACf,OAEQ,4CCOGC,EAVE,WACb,OAEQ,0CCgCGC,MA1Bf,WACE,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,CAAMd,MAAO,kBAAC,EAAD,SAEf,kBAAC,IAAD,CAAOc,KAAK,UACV,kBAAC,EAAD,CAAMd,MAAO,kBAAC,EAAD,SAEf,kBAAC,IAAD,CAAOc,KAAK,WACV,kBAAC,EAAD,CAAMd,MAAO,kBAAC,EAAD,SAEf,kBAAC,IAAD,CAAOc,KAAK,eACV,kBAAC,EAAD,CAAMd,MAAO,kBAAC,EAAD,SAEf,kBAAC,IAAD,CAAOc,KAAK,aACV,kBAAC,EAAD,CAAMd,MAAO,kBAAC,EAAD,aCjBLe,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c2e52a82.chunk.js","sourcesContent":["import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst SidePanel = () => {\n    const history = useHistory();\n    return (\n        (\n            <div>\n                <div onClick={() => {\n                    history.push('/')\n                }}>\n                    Home\n                </div>\n                <div onClick={() => {\n                    history.push('/About')\n                }}\n                    >About\n                </div>\n                <div onClick={() => {\n                    history.push('/Skills')\n                }} >\n                    Skills\n                </div>\n                <div onClick={() => {\n                    history.push('/Experience')\n                }}>\n                    Experience\n                </div>\n                <div onClick={() => {\n                    history.push('/Projects')\n                }}>\n                    Projects\n                </div>\n            </div>\n        )\n    )\n};\n\nexport default SidePanel;","import React from 'react';\nconst Body = ({child}) => {\n    return (\n        (\n            <div>\n                {child}\n            </div>\n        )\n    )\n};\n\nexport default Body;","import React from 'react';\nimport SidePanel from './Sidepanel';\nimport Body from './Body';\n\nconst Main = ({ child }) => {\n    return (\n        (\n            <div className=\"grid\">\n                <SidePanel />\n                <Body child={child} />\n            </div>\n        )\n    )\n}\n\nexport default Main;","import React from 'react';\n\nconst Home = () => {\n    return (\n        (\n            <div>\n                <img src=\"./profile.jpg\" />\n                <div>\n                <p className=\"large\">Pushpak Singirikonda</p>\n                <p className=\"fullstack\">FullStack Developer</p>\n                </div>\n                <div className=\"flex-container-row height-10vh\">\n                    <i className=\"fa fa-github margin-l-r\"\n                    onClick={() => {\n                        window.open('https://github.com/pushpak-fullstackdev')\n                    }}\n                    aria-hidden=\"true\"></i>\n                    <i className=\"fa fa-linkedin margin-l-r\" \n                    onClick={() => {\n                        window.open('https://www.linkedin.com/in/pushpaksingirikonda')\n                    }}\n                    aria-hidden=\"true\"></i>\n                    <i className=\"fa fa-instagram margin-l-r\" \n                    onClick={() => {\n                        window.open('https://www.instagram.com/singirikonda/')\n                    }}\n                    aria-hidden=\"true\"></i>\n                    <i className=\"fa fa-facebook margin-l-r\"\n                    onClick={() => {\n                        window.open('https://www.facebook.com/pushpak2255')\n                    }}\n                    aria-hidden=\"true\"></i>\n                </div>\n            </div>\n        )\n    )\n}\n\nexport default Home;","import React from 'react';\n\nconst About = () => {\n    return (\n        (\n            <div>\n                About\n            </div>\n        )\n    )\n}\n\nexport default About;","import React from 'react';\n\nconst Skills = () => {\n    return (\n        (\n            <div>\n                Skills\n            </div>\n        )\n    )\n}\n\nexport default Skills;","import React from 'react';\n\nconst Experience = () => {\n    return (\n        (\n            <div>\n                Experience\n            </div>\n        )\n    )\n}\n\nexport default Experience;","import React from 'react';\n\nconst Projects = () => {\n    return (\n        (\n            <div>\n                Projects\n            </div>\n        )\n    )\n}\n\nexport default Projects;","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './components/router-components/Home';\nimport About from './components/router-components/About';\nimport Skills from './components/router-components/Skills';\nimport Experience from './components/router-components/Experience';\nimport Projects from './components/router-components/Projects';\n\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Main child={<Home />} />\n          </Route>\n          <Route path=\"/About\">\n            <Main child={<About/>} />\n          </Route>\n          <Route path=\"/Skills\">\n            <Main child={<Skills/>} />\n          </Route>\n          <Route path=\"/Experience\">\n            <Main child={<Experience/>} />\n          </Route>\n          <Route path=\"/Projects\">\n            <Main child={<Projects/>} />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}